#!/bin/bash

# Suggested attribute layout
# net.ghanima:userhome = 'shaun'
# net.ghanima:userhomedir = '/' or '/Downloads/'
# net.ghanima:ssh_authorized_keys = 'ecdsa....'

function log {
  echo "$(date) ${@}" >>/tmp/mount-zfs-home
  #echo "${@}" | logger
  #echo "${@}"
}

function zfs_list_userhomes {
  # This may seem overly complicated since just using "zfs list" and parsing the
  #  text output is a reasonably simple task, but this method, using a channel
  #  program to provide json formatted output and then passing that to the jq
  #  json parser, provides some safety measures such as handling unexpected
  #  characters in values.
  # We will ultimately end up with a mix of parsing command line tool output and
  #  passing around json.  This is because, at least at the time of writing, not
  #  all of the required functions exist in the channel program api.
  # The following properties are not returned by the "zfs.get_prop" function:
  #   * mounted
  #   * encryptionroot
  # There appears to be no way to enumerate zpools

  readarray -t zpools < <(zpool list -o name | tail -n +2)
  for zpool in "${zpools[@]}"; do
    read -r -d '' zfs_rlist <<-ZFSRLIST
      function list_recursive(root, filteruser)
        for child in zfs.list.children(root) do
          list_recursive(child, filteruser)
        end

        userhome, src  = zfs.get_prop(root, "${zfs_attribute_prefix}userhome")
        userhomedir, src  = zfs.get_prop(root, "${zfs_attribute_prefix}userhomedir")
        encryptionroot, src  = zfs.get_prop(root, "mounted")
        if (filteruser ~= nil) then
          if (filteruser == userhome) then
            results[root] = {}
            results[root]["${zfs_attribute_prefix}userhome"] = userhome
            results[root]["${zfs_attribute_prefix}userhomedir"] = userhomedir
            results[root]["encryptionroot"] = encryptionroot
          end
        elseif (userhome ~= nil) then
          results[root] = {}
          results[root]["${zfs_attribute_prefix}userhome"] = userhome
          results[root]["${zfs_attribute_prefix}userhomedir"] = userhomedir
          results[root]["encryptionroot"] = encryptionroot
        end
      end

      results = {}
      list_recursive("${zpool}", "${PAM_USER}")

      return results
ZFSRLIST

    #echo "${zfs_rlist}"
    json=$(echo "${zfs_rlist}" | zfs program -n -j "${zpool}" - "${zpool}")
    echo "${json}" | jq
  done
}

function mount_home {
  root_only=${1}

  # Find all datasets that belong to this user
  # zfs list -o name,net.ghanima:userhome | awk '{print $2}' | grep "^${PAM_USER}\$"
  readarray -t userhomes < <(zfs list -o name,${zfs_attribute_prefix}userhome,{$zfs_attribute_prefix}userhomedir) | ##grep for username)
  for userhome in "${userhomes[@]}"; do
    userhome=(${userhome})
    dataset=${userhome[0]}
    userhomedir=${userhome[2]}
    userhome=${userhome[1]}

    if [ "${userhomedir}" == '/' ]; then
      # If we're *not* processing the root on this pass
      if [ $root_only -lt 1 ]; then
        next
      fi
      root_found=1
    else
      # If we're *only* processing the root on this pass
      if [ $root_only -ge 1 ]; then
        next
      fi
    fi

    # Check that overlay is set to on
    zfs set overlay=on "${dataset}"

    # Check that mountpoint is set to legacy
    zfs set mountpoint=legacy "${dataset}"

    # Get the encryptionroot
    encryptionroot=$(zfs get encryptionroot "${dataset}" | tail -1 | awk '{print $3}')

    # Get encryption key status
    keystatus=$(zfs get keystatus "${encryptionroot}" | tail -1 | awk '{print $3}' | grep -c "available")

    # If the encryptionroot is set and the keystatus is not "available" and ${PAM_AUTHOK} is set
    if [ $keystatus -lt 1 ] && [ "${PAM_AUTHOK}" != "" ]; then
      log "Attempting to \"zfs load-key \"${encryptionroot}\""
      echo "${PAM_AUTHOK}" | zfs load-key "${encryptionroot}"
    elif [ $keystatus -gt 0 ]; then
      log "Encryption key for \"${encryptionroot}\" is already loaded"
    elif [ "${PAM_AUTHTOK}" == "" ]; then
      log "\${PAM_AUTHTOK} not set in environment.  Cannot load key for \"${encryptionroot}\""
    fi

    # mount
    mount -t zfs "${dataset}" "${user_home_mountpoint}/${userhomedir}"
  done
}

log "libpam-script called: $0, ${PAM_USER}"

root_found=0
user_home_mountpoint=$(getent passwd "${PAM_USER}" | awk 'BEGIN{FS=":"}{print $(NF-1)}')
uid=$(id -u "${PAM_USER}")
zfs_attribute_prefix="net.ghanima:"

zfs_list_userhomes
exit 1

# Users with ID's less than 1000 are typically system users
if [ $uid -lt 1000 ]; then
  log "UID for '${PAM_USER}' is less that 1000.  Probably a system user.  Exiting."
  exit 0
fi

# Attempt to mount the root directory of the user home
mount_home 1

if [ $root_found -lt 1 ]; then
  # A home directory for this user doesn't exist.  If possible, create one.

  result=$(
    echo "${PAM_AUTHTOK}" | \
    zfs create \
      -o encryption=on \
      -o keyformat=passphrase \
      -o mountpoint=legacy \
      -o overlay=on \
      -o devices=off \
      -o setuid=off \
      -o "${zfs_attribute_prefix}userhome"="${PAM_USER}" \
      -o "${zfs_attribute_prefix}userhomedir"="/" \
      "${TODO}" \
    2>&1
  )
  log "$?: ${result}"

  # Then run the mount_home function again
  mount_home 1
fi

# Attempt to mount the sub-directories of the user home
mount_home 0
